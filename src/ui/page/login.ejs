<script>
	pre (function () {
		var ui = frame ('login');
		
		[] .forEach .call (ui .querySelectorAll ('#hint[for=input]'), function (_) {
			_ .outerHTML = input_ify (_);
		});
		
		def = serve (ui);
	})
</script>

<script>
	var _interaction, _nav;
	ui .interaction (interaction_to_be (promise_of (function (is) {
		_interaction = is;
	})));
	ui .nav (interaction_to_be (promise_of (function (is) {
		_nav = is;
	})));
	
	self .on ('mount', function () {
	    var dom = self .root;
	    
	    var nav_interaction = _nav_interaction_ ();
	    _nav (nav_interaction);

		var login_dom = dom .querySelector ('#login[action=focus]');
		var make_account_dom = dom .querySelector ('#make-account[action=side]');
		
		var login_stream = stream_from_click_on (login_dom);
		var make_account_stream = stream_from_click_on (make_account_dom);
									
									
		var email_dom = dom .querySelector ('#email');
		var password_dom = dom .querySelector ('#password');
		
		var email_interaction =	interaction_placeholder (
									email_dom .querySelector ('#placeholder'),
									interaction_input (email_dom .querySelector ('input'))
								);
		var password_interaction =	interaction_placeholder (
										password_dom .querySelector ('#placeholder'), 
										interaction_input (password_dom .querySelector ('input'))
									);

		_interaction (interaction_key_sum (
			_interaction_ ({
					login: login_stream,
					make_account: make_account_stream,
					
					email: email_interaction,
					password: password_interaction
				}, 
				{
				    nav: nav_interaction
				}),
			interaction_product ({
			    nav: nav_interaction
			})
		))
	})
	
	
	var _nav_interaction_ = function () {
	    return interaction (transition (function (intent, state) {
	        if (intent [0] === 'prepare')
	            return only_ (null);
	        else
    	        return reflect (none);
	    }))
	};
	
	var _interaction_ =	function (components, unions) {
	    var nav = unions .nav;
	    
		var login = components .login;
		var make_account = components .make_account;
		
		var email = components .email;
		var password = components .password;
		
		var extension = interaction (transition (function (intent, license) {
			if (intent === 'login') {
				return	function (tenure) {
							if (! (email .state () ._ && email .state () .dom .checkValidity ())) {
								toast ('Please make sure you enter a valid email');
								tenure .end (true);
							}
							else {
								tenure ('logging-in');
								loader ();
								return inquire (api () .login, {
									email: email .state () ._,
									password: password .state () ._
								})
								.then (function (res) {
									loader .stop ();
									if (res .error) {
										toast ('There was a problem logging in');
										tenure .end (true); 
									}
									else {
										email .intent ({ _: ['reset'] });
										password .intent ({ _: ['reset'] });
										tenure .end (true); 
										nav .state (['logged_in']); 
									}
								})
							}
						}
			}
			else {
    	        var err = new Error ('unknown intent passed')
    	        err .intent = intent;
    	        report (err);
    	        return reflect (none);
			}
		}));
		
		extension .state (null);
		
		login .thru (tap, function () {
			extension .intent ('login');
		})
		make_account .thru (tap, function () {					
		    nav .state (['need_account']); 
		})
		
		return interaction_product ({
			_: extension,
			
			input_email: email,
			input_password: password
		})
	}
</script>