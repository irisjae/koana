<script>
	pre (function () {
		var uis = [frame ('dashboard-create-1'), frame ('dashboard-create-2')];
		
		[] .forEach .call (uis [0] .querySelectorAll ('#hint[for=input]:not([type=date])'), function (_) {
			_ .outerHTML = input_ify (_);
		});

		[] .forEach .call (uis [1] .querySelectorAll ('#hint[for=image]'), function (_) {
			_ .outerHTML = image_ify (_);
		});

		def = serve (uis [0], uis [1]);
	})
</script>
<script>

    var doms = [ self .root .children [0], self .root .children [1] ];
		    
    var _interaction = interaction_to_be (promise_of (function (is) {
		self .on ('mount', function () {
		    var dom = self .root;

			var back_dom = dom .querySelector ('#back[action=nav]');
			var done_dom = dom .querySelector ('#done[action=focus]');
			
			var back_stream = stream_from_click_on (back_dom);
			var done_stream = stream_from_click_on (done_dom);
										
										
			var name_dom = dom .querySelector ('#name');
			var school_name_dom = dom .querySelector ('#school-name');
			var date_of_birth_dom = dom .querySelector ('#date-of-birth');
			
			var name_interaction =	interaction_placeholder (
										name_dom .querySelector ('#placeholder'),
										interaction_input (name_dom .querySelector ('input'))
									);
			var school_name_interaction =	interaction_placeholder (
    											school_name_dom .querySelector ('#placeholder'), 
    											interaction_input (school_name_dom .querySelector ('input'))
    										);
			var date_of_birth_interaction =	interaction_placeholder (
												date_of_birth_dom .querySelector ('#placeholder'), 
												interaction_date_picker (date_of_birth_dom .querySelector ('input'))
											);
	
			is (
				_interaction_ ({
					back: back_stream,
					done: done_stream,
					
					name: name_interaction,
					school: school_name_interaction,
					date_of_birth: date_of_birth_interaction
				})
			)
		})
	}))
	
	
	var _interaction_ =	function (components) {
		var back = components .back;
		var done = components .done;
		
		var name = components .name;
		var school = components .school;
		var date_of_birth = components .date_of_birth;
		
		var extension = interaction (transition (function (intent, license) {
			if (intent === 'done') {
				return 	function (tenure) {
				            if (! name .state () ._) {
				                toast ('Please fill in your name')
				                tenure .end (true);
				            }
				            else if (! school .state () ._) {
				                toast ('Please fill in your school name')
				                tenure .end (true);
				            }
				            else if (! date_of_birth .state () ._) {
				                toast ('Please fill in your date of birth')
				                tenure .end (true);
				            }
				            else {
    				            api () .create_koder = re_cycle ();
    				            api () .create_koder .to ({
    				                name: name .state () ._,
    				                school: school .state () ._,
    				                date_of_birth: date_of_birth .state () ._
    				            })
    				            window .location .href = routes .dashboard_create_two
				                tenure .end (true);
				            }
						};
			}
			else {
				console .error ('unknown intent passed', intent);
				return function (tenure) {
				    tenure .end (true);
				}
			}
		}));
		
		extension .state (null);
		
		back .thru (tap, function () {
			window .location .href = routes .dashboard;
		})
		done .thru (tap, function () {
			extension .intent ('done');
		})
		
		return interaction_product ({
			_: extension,
			
			input: interaction_product ({
			    name: name,
			    school: school,
			    date_of_birth: date_of_birth
			})
		})
	}
</script>