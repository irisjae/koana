<script>
	pre (function () {
		ui = frame ('categories');

		var scroll_hints = ui .querySelectorAll ('#hint[for=scroll]');
		[] .forEach .call (scroll_hints, fulfill_scroll);
        

        var category_title_dy, quiz_dx;
        exemplify (ui .querySelectorAll ('#category[template]'), [function (categories) {
            var areas = categories .map (function (category) {
                return category .querySelector ('#hint');
            });
            category_title_dy = y_translation (areas [1]) - y_translation (areas [0]);
        }, function (category) {
            category .setAttribute ('template', true);
            
    		var category_title = category .querySelector ('#title #hint[for=text]');
                category_title .outerHTML = text_ify (category_title);
    
    		exemplify (category .querySelectorAll ('#quiz[template]'), [function (quizes) {
                var areas = quizes .map (function (category) {
                    return category .querySelector ('#hint[for=click]');
                });
                quiz_dx = x_translation (quizes [1]) - x_translation (quizes [0]);
    		}, function (quiz) {
                quiz .setAttribute ('template', true);
                var name_area = quiz .querySelector ('#name #hint[for=text]');
                    name_area .outerHTML = text_ify (name_area);
                var icon_area = quiz .querySelector ('#icon #hint[for=image]');
                    icon_area .setAttribute ('style', 'display: flex; width: 100%; height: 100%; flex-direction: column; justify-content: flex-end;');
                    icon_area .outerHTML = image_ify (icon_area);
    		}]);
        }]);
		
		scripts .unshift (`
		    var category_title_dy = ${category_title_dy};
		    var quiz_dx = ${quiz_dx};
	    `);
    
		def = serve (ui);
	})
</script>

<script>
    var _interaction = interaction_to_be (promise_of (function (is) {
    	self .on ('mount', function () {
    		is (_interaction_ (self .root));
    	})
    }));
    _interaction .intent (['load']);
    
    
	var _interaction_ = function (dom) {
        var svg;
	    var make_categories_dom = function (data) {
            var categories = document .createDocumentFragment ();
            
            var order = 0;
            
            mapper (data)
                .map (R .forEachObjIndexed (function (subcategories, category) {
                    var category = make_category_dom (subcategories, category);
                    var _ = category .getAttribute ('transform');
                    category .setAttribute ('transform', (_  ? _ + ' ' : '' ) + 'translate(0 ' + (order ++ * category_title_dy) + ')')
                    
                    categories .insertBefore (category, null);
                }))
        
            return categories;
	    }
        var make_category_dom = function (subcategories, name) {
            var category = svg .querySelector ('#category[template]') .cloneNode (true);
                category .removeAttribute ('template');
                var category_title = category .querySelector ('#title #hint[for=text]');
                    category_title .textContent = name;
                    
                var items = category .querySelector ('#subcategories');
                    items .insertBefore (make_quizes_dom (subcategories), items .querySelector ('#quiz[template]'));
                
            return category;
        }
        var make_quizes_dom = function (info) {
            var subcategories = document .createDocumentFragment ();
            
            var order = 0;
            info .forEach (function (info) {
                var quiz = make_quiz_dom (info);
                var _ = quiz .getAttribute ('transform');
                quiz .setAttribute ('transform', (_  ? _ + ' ' : '' ) + 'translate(' + (order ++ * quiz_dx) + ' 0)')
                subcategories .insertBefore (quiz, null);
            })
            
            return subcategories;
        }
        var make_quiz_dom = function (info) {
            var name = info [0];
            var image = info [1];
            var hyphenation = info [2];
            
            var quiz = svg .querySelector ('[id^="quiz-template-hint"][template]') .cloneNode (true);
                quiz .removeAttribute ('template');
                var quiz_name = quiz .querySelector ('[id^="name-area-hint"]');
                    quiz_name .textContent = hyphenation;
                var quiz_image = quiz .querySelector ('[id^="icon-area-hint"]');
                    quiz_image .querySelector ('img') .setAttribute ('src', image);
            return quiz;
        }
        
             
		click (self .root .querySelector ('[id="header"]') .querySelector ('[id="back"]'), function () {
			window .location .href = routes .dashboard;
		})   
        //find all categories  
        next_tick () .then (function () {
            scroll_interaction ('x') (items);
        })
        /*click (quiz, function () {
            var quiz_info = api () .quiz .from ();
            var today_date_string = function () {
                return date_string (new Date ()) 
            };
            var consecutive_today = function () {
                return quiz_info && quiz_info .date === today_date_string ();
            }
            if (consecutive_today () && quiz_info .length === 3) {
                toast ('You have used up your three sets of practices today!');
            }
            else {
                api () .quiz .to (R .cond ([
                    [consecutive_today, R .pipe (
                        R .converge (R .assoc, [R .prop ('length'), function () { return name }, R .identity]),
                        R .converge (R .assoc, [R .always ('length'), R .compose (R .add (1), R .prop ('length')), R .identity]),
                    )],
                    [R .T, R. pipe (
                        R .always ({
                            length: 1,
                            0: name
                        }),
                        R .converge (R .assoc, [R .always ('date'), today_date_string, R .identity])
                    )]
                ]) (quiz_info));
                window .location .href = routes .quiz
            }
        });*/

	    svg = dom .querySelector ('svg');
	    
	    var body = svg .querySelector ('[id="body"]');
	    
	    svg .addEventListener ('load', (x)=>console.log(x));
	    
		//detect when svg is properly loaded
		var scroll = interaction_to_be (next_tick () .then (function () {
		    return scroll_interaction ('y') (svg .querySelector ('[id="body"]'))
	    }))
	    
	    return interaction (transition (function (intent, license) {
	        if (intent [0] === 'load') {
	            return mergeAll ([
	                only_ (undefined),
	                from_promise (Promise .resolve () .then (function () {
                        loader ('Updating with new quizes...');
                        return last_or_inquire (api () .subcategories) .then (function (subcategories) {
                            body .insertBefore (make_categories_dom (subcategories), items .querySelector ('[id^="category-template-hint"][template]'));
            	            loader .stop ();
            	            return subcategories;
            	        })
                    }))
                ])
	        }
	    }))
	}
</script>