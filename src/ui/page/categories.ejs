<script>
	pre (function () {
		ui = frame ('categories');

		var scroll_hints = ui .querySelectorAll ('#hint[for=scroll]');
		[] .forEach .call (scroll_hints, fulfill_scroll);
        

        var category_title_dy, quiz_dx;
        exemplify (ui .querySelectorAll ('#category[template]'), [function (categories) {
            var areas = categories .map (function (category) {
                return category .querySelector ('#hint');
            });
            category_title_dy = y_translation (areas [1]) - y_translation (areas [0]);
        }, function (category) {
    		var category_title = category .querySelector ('#title #hint[for=text]');
                category_title .outerHTML = text_ify (category_title);
    
    		exemplify (category .querySelectorAll ('#quiz[template]'), [function (quizes) {
                var areas = quizes .map (function (category) {
                    return category .querySelector ('#hint[for=click]');
                });
                quiz_dx = x_translation (quizes [1]) - x_translation (quizes [0]);
    		}, function (quiz) {
                var name_area = quiz .querySelector ('#name #hint[for=text]');
                    name_area .outerHTML = text_ify (name_area);
                var icon_area = quiz .querySelector ('#icon #hint[for=image]');
                    icon_area .outerHTML = image_ify (icon_area);
    		}]);
        }]);
		
		scripts .unshift (`
		    var category_title_dy = ${category_title_dy};
		    var quiz_dx = ${quiz_dx};
	    `);
    
		def = serve (ui);
	})
</script>

<script>
	var _interaction, _nav;
	ui .interaction (interaction_to_be (promise_of (function (is) {
		_interaction = is;
	})));
	ui .nav (interaction_to_be (promise_of (function (is) {
		_nav = is;
	})));
	
	
	self .on ('mount', function () {
		var back_dom = self .root .querySelector ('[id="header"]') .querySelector ('[id="back"]');
		var back_stream = stream_from_click_on (back_dom);

	    
	    var body_dom = self .root .querySelector ('[id="body"]');

		//detect when svg is properly loaded
	    svg .addEventListener ('load', (x)=>console.log(x));
	    
		
		_interaction (_interaction_ (self .root));


//		        _interaction .intent (['load']);

	})
    
    
	var _interaction_ = function (components, unions) {
        var back = components .back;
        
        var nav = unions .nav;
             
		back .thru (tap, function () {
			nav .state (['back']);
		})   
        //find all categories  
        
        /*click (quiz, function () {
            var quiz_info = api () .quiz .from ();
            var today_date_string = function () {
                return date_string (new Date ()) 
            };
            var consecutive_today = function () {
                return quiz_info && quiz_info .date === today_date_string ();
            }
            if (consecutive_today () && quiz_info .length === 3) {
                toast ('You have used up your three sets of practices today!');
            }
            else {
                api () .quiz .to (R .cond ([
                    [consecutive_today, R .pipe (
                        R .converge (R .assoc, [R .prop ('length'), function () { return name }, R .identity]),
                        R .converge (R .assoc, [R .always ('length'), R .compose (R .add (1), R .prop ('length')), R .identity]),
                    )],
                    [R .T, R. pipe (
                        R .always ({
                            length: 1,
                            0: name
                        }),
                        R .converge (R .assoc, [R .always ('date'), today_date_string, R .identity])
                    )]
                ]) (quiz_info));
                window .location .href = routes .quiz
            }
        });*/

		var categories = stream ();
	    
	    nav .intent .thru (filter, R .propEq (0, 'prepare')) .thru (tap, function () {
            loader ('Updating with new quizes...');
            return inquire (api () .subcategories) .then (function (subcategories) {
                body .insertBefore (make_categories_dom (subcategories), items .querySelector ('[id^="category-template-hint"][template]'));

	            loader .stop ();
	        })
	    })

	    
	    return //interaction (transition (function (intent, license) {
	}
	



	var categories_interaction = function (components) {
		var dom = components .dom;
		var categories = components .categories;

		var scroll_interaction = scroll_interaction ('y') (dom)
        
        var _ = interaction (transition (function (intent, license) {
        	if (intent [0] === 'data') {
        		var data = intent [1];
        		var old = intent [2];
        		
        		categories .intent (
	        		R .range (0, data .length) .map (function (x) {
		        		return ['data', data [x]];
	        		}) .concat (
	        			R .range (data .length, old .length) .map (function (x) {
			        		return ['reset'];
		        		}))
    			);
				return only_ (null);
        	}
        	else {
        		return decline_ (intent);
        	}
        }));
        
        return interaction_product ({
        	_: _,
        	dom: {
        		intent: none,
        		state: stream (dom)
        	},
        	categories: categories_interactions
        })
	};
	
	//interaction_product ([] .map .call (dom .querySelector ('[list-item]'), interaction))
	
	var list_interaction = function (dom, interaction_of) {
		var doms = [];
		var interactions = stream ([]);
		var visible_indexes = [];
		var _ = interaction (transition (function (intent, license) {
        	intent .forEachObjIndexed (function (intent, i) {
        		if (intent [i] === 'data') {
        			if (i >= doms .length) {
        				R .range (doms .length, i + 1) .forEach (function () {
        					var _dom = dom .cloneNode (true);
        					var _interaction = interaction_of (_dom);
        					doms .push (_dom);
        					interactions (
        						interactions () .concat ([_interaction]));
        					dom .parentNode .append (_dom);
        				})
        			}
        			interactions () [i] .intent (intent);
        			mark_visible (i);
        		}
        		else if (intent [i] === 'reset') {
        			interactions () [i] .intent (intent);
        			unmark_visible (i);
        		}
				else {
					return decline_ (intent)
				}
        	})
        	return reflect (none);
		}));
		
		//change to binary search
		var mark_visible = function (i) {
			var min = 0
			while (min < visible_indexes .length && visible_indexes [min] < i) min ++;
			visible_indexes .splice (min, 0, i);
			doms [i] .style .visibility = '';
		}		
		var unmark_visible = function (i) {
			var x = visible_indexes .indexOf (i);
			if (x === -1) throw new Error ('visible index not found');
			/*if (x === visible_indexes .length - 1)
				R .range (visible_indexes [x - 1] + 1, i) .forEach ()*/
			visible_indexes .splice (x, 1);
			doms [i] .style .visibility = 'hidden';
		}		
		
		return R .evolve ({
			intent: R .always ([stream ()] .map (R .tap (function (i) { i .thru (tap, _ .intent) })) [0])
		}) (interaction_flatten (interactions .thru (map, interaction_product_array)));
	};
	var category_interaction = function (components) {
		var dy = components .dy;
		var dom = components .dom;
		var name = components .name;
		var subcategories = components .subcategories;
		
        var category = make_category_dom (subcategories, category);
        var _transform = category .getAttribute ('transform');
        
		var extension = interaction (transition (function (intent, license) {
			if (intent [0] === 'data') {
				var data = intent [1];
				var order = intent [2];
				
		        dom .setAttribute ('transform', _transform + (_transform ? ' ' : '' ) + 'translate(0 ' + (order * dy) + ')');
				name .textContent = data .name;
				subcategories .intent (['data', data .subcategories]);
				
				return only_ ([data, order])
			}
			else if (intent [0] === 'reset') {
				return only_ (null);
			}
			else
				return decline_ (intent);
		))
		return interaction_product ({
			_: extension,
			subcategories: subcategories
		})
	};
	
	
</script>










<script>
	
    var make_categories_dom = function (data) {
        var categories = document .createDocumentFragment ();
        
        var order = 0;
        
        [data]
            .map (R .forEachObjIndexed (function (subcategories, category) {
                var category = make_category_dom (subcategories, category);
                var _ = category .getAttribute ('transform');
                category .setAttribute ('transform', (_  ? _ + ' ' : '' ) + 'translate(0 ' + (order ++ * category_title_dy) + ')')
                
                categories .insertBefore (category, null);
            }))
    
        return categories;
    }
    var make_category_dom = function (subcategories, name) {
        var category = svg .querySelector ('#category[template]') .cloneNode (true);
            category .removeAttribute ('template');
            var category_title = category .querySelector ('#title #hint[for=text]');
                category_title .textContent = name;
                
            var items = category .querySelector ('#subcategories');
                items .insertBefore (make_quizes_dom (subcategories), items .querySelector ('#quiz[template]'));

        next_tick () .then (function () {
            scroll_interaction ('x') (items);
        })
            
        return category;
    }
    var make_quizes_dom = function (info) {
        var subcategories = document .createDocumentFragment ();
        
        var order = 0;
        info .forEach (function (info) {
            var quiz = make_quiz_dom (info);
            var _ = quiz .getAttribute ('transform');
            quiz .setAttribute ('transform', (_  ? _ + ' ' : '' ) + 'translate(' + (order ++ * quiz_dx) + ' 0)')
            subcategories .insertBefore (quiz, null);
        })
        
        return subcategories;
    }
    var make_quiz_dom = function (info) {
        var name = info [0];
        var image = info [1];
        var hyphenation = info [2];
        
        var quiz = svg .querySelector ('[id^="quiz-template-hint"][template]') .cloneNode (true);
            quiz .removeAttribute ('template');
            var quiz_name = quiz .querySelector ('[id^="name-area-hint"]');
                quiz_name .textContent = hyphenation;
            var quiz_image = quiz .querySelector ('[id^="icon-area-hint"]');
                quiz_image .querySelector ('img') .setAttribute ('src', image);
        return quiz;
    }
</script>