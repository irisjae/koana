<item ref="item">
	<status>
		<svg if={ my ('empty') } viewBox="0 0 24 24"><path d="M19 5v14H5V5h14m0-2H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2z"></path></svg>
		<svg if={ my ('half') } viewBox="0 0 24 24"><path d="M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm-2 10H7v-2h10v2z"></path></svg>
		<svg if={ my ('full') } viewBox="0 0 24 24"><path d="M19 3H5c-1.11 0-2 .9-2 2v14c0 1.1.89 2 2 2h14c1.11 0 2-.9 2-2V5c0-1.1-.89-2-2-2zm-9 14l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z"></path></svg>
	</status>
	<label>{ my ('name') }</label>
	<branch-status if={ my ('branched') }>
		<button type="button">
			<svg if={ ! my ('empty') } viewBox="0 0 24 24"><path d="M12 8l-6 6 1.41 1.41L12 10.83l4.59 4.58L18 14z"></path></svg>
			<svg if={ my ('empty') } viewBox="0 0 24 24"><path d="M16.59 8.59L12 13.17 7.41 8.59 6 10l6 6 6-6z"></path></svg>
			<component-wavify center />
		</button>
	</branch-status>
	<component-wavify />
</item>
<branch if={ my ('branch-open') }>
	<component-tree-control items__from=":status" items__to=":modifications" />
</branch>	

<style>
    > item {
        border: 10px;
        display: block;
        font-family: Roboto, sans-serif;
        -webkit-tap-highlight-color: rgba(0, 0, 0, 0);
        cursor: pointer;
        text-decoration: none;
        margin: 0px;
        padding: 0px;
        outline: none;
        font-size: 16px;
        position: relative;
        color: rgba(0, 0, 0, 0.870588);
        line-height: 16px;
        transition: all 450ms cubic-bezier(0.23, 1, 0.32, 1) 0ms;
        background: none;
        overflow: hidden;
        
        > status {
        	svg {
		    	display: block;
		    	color: rgba(0, 0, 0, 0.870588);
		    	fill: rgb(117, 117, 117);
		    	height: 24px;
		    	width: 24px;
		    	transition: all 450ms cubic-bezier(0.23, 1, 0.32, 1) 0ms;
		    	position: absolute;
		    	top: 0px;
		    	margin: 12px;
		    	left: 4px;
		    	user-select: none;
		    }
	    }
	    > label {
	    	margin-left: 0px;
	    	padding: 16px 16px 16px 72px;
	    	position: relative;
	    	display: block;
	    }
        > branch-status {
		    box-sizing: border-box;
		    display: block;
		    font-family: Roboto, sans-serif;
		    -webkit-tap-highlight-color: rgba(0, 0, 0, 0);
		    cursor: pointer;
		    text-decoration: none;
		    margin: 0px;
		    padding: 8px;
		    outline: none;
		    font-size: 0px;
		    font-weight: inherit;
		    position: absolute;
		    overflow: visible;
		    transition: all 450ms cubic-bezier(0.23, 1, 0.32, 1) 0ms;
		    width: 48px;
		    height: 48px;
		    top: 0px;
		    right: 4px;
		    background: none;
		    
		    > button {
			    border: 10px;
			    display: block;
			    margin: 0;
			    padding: 0;
			    outline: none;
			    font-size: 0px;
			    position: relative;
			    transition: all 450ms cubic-bezier(0.23, 1, 0.32, 1) 0ms;
			    width: 100%;
			    height: 100%;
			    background: none;
		    }
		    
		    svg {
		    	display: inline-block;
		    	color: rgba(0, 0, 0, 0.870588);
		    	fill: currentcolor;
		    	height: 24px;
		    	width: 24px;
		    	transition: all 450ms cubic-bezier(0.23, 1, 0.32, 1) 0ms;
		    	user-select: none;
		    }
	    }
    }
    > branch {
        display: block;
        padding: 8px 0px 8px 16px;
    }
</style>

<script>
	var zeroed =	one_cache (function (tree) {
						if (typeof tree === 'boolean') {
							return ! tree;
						}
						else {
							var list = Object .keys (tree);
							for (var nth = 0; nth < list .length; nth ++) {
								var item = list [nth];
								if (! zeroed (tree [item]))
									return false;
							}
							return true;
						}
					});
	var filled = 	one_cache (function (tree) {
						if (typeof tree === 'boolean') {
							return tree;
						}
						else {
							var list = Object .keys (tree);
							for (var nth = 0; nth < list .length; nth ++) {
								var item = list [nth];
								if (! filled (tree [item]))
									return false;
							}
							return true;
						}
					});
	self
        .establish ('tree', constant (self .impressions (args .item__from) .thru (dropRepeatsWith, json_equal)))
    	.impressions ('tree')
    		.thru (map, noop) .thru (tap, self .render)
    		
    		
    self
        .establish ('name', dependent (function () {
            return my ('tree') .name;
        }, self .impressions ('tree')))
        .establish (':status', dependent (function () {
            return my ('tree') .status;
        }, self .impressions ('tree')))
        
        .establish ('empty', dependent (function () {
            return zeroed (my (':status'));
        }, self .impressions (':status')))
        .establish ('half', dependent (function () {
            return ! zeroed (my (':status')) && ! filled (my (':status'));
        }, self .impressions (':status')))
        .establish ('full', dependent (function () {
            return filled (my (':status'));
        }, self .impressions (':status')))
        
        .establish ('branched', dependent (function () {
            return typeof my (':status') !== 'boolean';
        }, self .impressions (':status')))
        .establish ('branch-open', dependent (function () {
            return typeof my (':status') !== 'boolean' && ! zeroed (my (':status'));
        }, self .impressions (':status')))
        
    
    self
		.establish ('item', ref)
		.impressions ('item')
			.thru (tap, function (ref) {
				ref .addEventListener ('click', function () {
					self .mention ('toggle');
				}, true)
			});
			
			

	var zero =	function (inp) {
					if (typeof inp === 'boolean') {
						return false;
					}
					else {
						var list = Object .keys (inp);
						var tree = {};
						for (var nth = 0; nth < list .length; nth ++) {
							var item = list [nth];
							tree [item] = zero (inp [item]);
						}
						return tree;
					}
				};
	var fill =	function (inp) {
					if (typeof inp === 'boolean') {
						return true;
					}
					else {
						var list = Object .keys (inp);
						var tree = {};
						for (var nth = 0; nth < list .length; nth ++) {
							var item = list [nth];
							tree [item] = fill (inp [item]);
						}
						return tree;
					}
				};
	self
		.remembers ('toggle')
		.impressions ('toggle')
			.thru (tap, function () {
				var name = my ('name');
				var status = my (':status');
				self .mention (args .substitute__to, {
					item: name,
					sub: zeroed (status) ? fill (status) : zero (status)
				})
			});
			
			
	self
		.remembers (':modifications')
		.impressions (':modifications')
			.thru (tap, function (sub) {
				self .mention (args .substitute__to, {
					item: my ('name'),
					sub: sub
				})
			})
</script>