<render ref="render">
	<yield />
</render>

<style>
	@at-root {
		@keyframes cache-access {  
		    from {  
		        outline-color: #fff; 
		    }
		    to {  
		        outline-color: #000;
		    } 
		}
		@-webkit-keyframes cache-access {  
		    from {  
		        outline-color: #fff; 
		    }
		    to {  
		        outline-color: #000;
		    }  
		}
	}
	
    animation-duration: 0.01s;
    -o-animation-duration: 0.01s;
    -ms-animation-duration: 0.01s;
    -moz-animation-duration: 0.01s;
    -webkit-animation-duration: 0.01s;
    animation-name: cache-access;
    -ms-animation-name: cache-access;        
    -moz-animation-name: cache-access;
    -webkit-animation-name: cache-access;
</style>

<script>
	var key = args .key;

	(window .cache_access || (window .cache_access = from (function (self) {
		document .addEventListener ('animationstart', self, false);
	})))
		.thru (map, function (event) {
			return event .target
		})
		.thru (filter, function (root) {
			return root === self .root
		})
		.thru (tap, logged_with ('attached ' + key))
		.thru (tap, function () {
			if (! window .component_cache) window .component_cache = {};
			if (! window .component_cache [key]) {
				var mother = self .root;
				
				var put_back;
				var main_cache = ref ('render') ();
				window .component_cache [key] =	function (put){
													if (put_back)
														main_cache .parentNode .insertBefore (put_back, main_cache);
													if (put === main_cache) {
														mother .insertBefore (main_cache, null);
														put_back = undefined;
													}
													else {
														put .parentNode .insertBefore (main_cache, put);
														put .parentNode .removeChild (put);
														put_back = put;
													}
												}
			}
			else {
				window .component_cache [key] (ref ('render') ());
			}
		})
</script>