<component-dynamic-load-item each={ wrap, i in target_items () } nth={ _item .wrap .nth } item={ loaded_item (_item .wrap .nth) } garbage={ _item .wrap .nth < loaded_range () .from || loaded_range () .to < _item .wrap .nth } no-reorder={ args .no_reorder } >
	<yield />
</component-dynamic-load-item>

<script>
	self .update_strategy = 'pull';
	
	
	var item_source = args .items__from;
	
	
	var nths = {};
	var wrap_nth =	function (nth) {
						if (! nths [nth])
							nths [nth] = { nth: nth };
						return nths [nth];
					};

	
	var loaded_items = item_source;
	var loaded_range = mechanism (function () {
		return rangify (loaded_items ());
	}, [loaded_items])
	var loaded_item = function (nth) {
		return loaded_items () [nth];	
	}
	var target_items = mechanism (function () {
		return arrayify (loaded_range ()) .map (wrap_nth);
	}, [ loaded_range ])
		
		
	loaded_items
		.thru (tap, function () {
			var date = new Date ();
			self .render ()
				.then (function () {
					log ('dynamic-load-all ' + (new Date () - date) + 'ms');
				});
		})
</script>

