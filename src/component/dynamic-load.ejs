<component-dynamic-load-item each={ wrap, i in target_items () } nth={ _item .wrap .nth } item={ loaded_item (_item .wrap .nth) } garbage={ _item .wrap .nth < loaded_range () .from || loaded_range () .to < _item .wrap .nth } style="transform: translateY({ height_up_to (_item .wrap .nth) }px);" >
	<yield />
</component-dynamic-load-item>
<stretcher style="height: { height_up_to (loaded_range () .to + 1) }px;" />

<style>
    width: 100%;
    position: relative;
    display: block;
    
	> component-dynamic-load-item {
		display: block;
		position: absolute;
		width: 100%;
	}
	> stretcher {
		display: block;
	}

	@at-root {
		@keyframes dynamic-load-rendered {  
		    from {  
		        outline-color: #fff; 
		    }
		    to {  
		        outline-color: #000;
		    } 
		}
		@-webkit-keyframes dynamic-load-rendered {  
		    from {  
		        outline-color: #fff; 
		    }
		    to {  
		        outline-color: #000;
		    }  
		}
	}
	
    animation-duration: 0.01s;
    -o-animation-duration: 0.01s;
    -ms-animation-duration: 0.01s;
    -moz-animation-duration: 0.01s;
    -webkit-animation-duration: 0.01s;
    animation-name: dynamic-load-rendered;
    -ms-animation-name: dynamic-load-rendered;        
    -moz-animation-name: dynamic-load-rendered;
    -webkit-animation-name: dynamic-load-rendered;
</style>

<script>
	self .update_strategy = 'pull';

	var list = closest_parent (self .root, 'main-content');
	var dynamic_load = self .root;
	
	var items_to_load = + args .items_to_load;
	var loading_interval = + args .interval_for_loading;
	
	var item_source = args .items__from;
	var item_height = args .item_height;
	
	var nths = {};
	var wrap_nth =	function (nth) {
						if (! nths [nth])
							nths [nth] = { nth: nth };
						return nths [nth];
					};
	

	
	var loaded_items = item_source;
	var loaded_range = mechanism (function () {
		return rangify (loaded_items ());
	}, [loaded_items]) .thru (begins_with, null_range)
	var loaded_item = function (nth) {
		return loaded_items () [nth];	
	}
	var height_up_to = function (nth) {
		return 	arrayify ({
					from: 0,
					to: nth - 1
				})
				.map (loaded_item)
				.reduce (function (total, item) {
					return total + item_height (item)
				}, 0);
	}
		
		
		
		
	var scroll_range = function () {
		return	{
					from: positive_or_zero (list .scrollTop - dynamic_load .offsetTop),
					to: positive_or_zero (list .scrollTop - dynamic_load .offsetTop + list .clientHeight)
				};
	};
	var target_range = mechanism (function () {
		var _scroll_range = scroll_range ();
		var _loaded_range = loaded_range ();
		
		var start =	(function () {
			var middle = (_scroll_range .from + _scroll_range .to) / 2;
			var min;
			
			var total = 0;
			var least_asymmetry = middle;
			
			for (var nth = 0; nth <= _loaded_range .to; nth ++) {
				if (total <= _scroll_range .from) min = nth;
				var new_total = total + item_height (loaded_item (nth));
				var new_asymmetry = Math .abs (new_total - middle);
				if (new_asymmetry < least_asymmetry) {
					total = new_total;
					least_asymmetry = new_asymmetry;
				}
				else {
					return Math .min (min, nth);
				}
			}
			return min || 0;
		}) ();
		var curr = intersection (target_range, _loaded_range);
		var next =	intersection ({
						from: start,
						to: start + items_to_load - 1
					}, _loaded_range);
		return curr && included_in (curr, next) ? curr : next
	}, [ mergeAll ([
			(window .dynamic_load_rendering || (window .dynamic_load_rendering = from (function (self) {
				document .addEventListener ('animationstart', self, false);
			})))
				.thru (map, R .prop ('target'))
				.thru (filter, R .equals (self .root))
				.thru (tap, logged_with ('attached')),
			from (function (when) { list .addEventListener ('scroll', function (x) { when (x); }); }) .thru (afterSilence, 5)
		]), loaded_range ]) .thru (tap, known_as ('target range'))
	var target_items = mechanism (function () {
		return arrayify (target_range ()) .map (wrap_nth);
	}, [target_range])
		
		
	loaded_items
		.thru (dropRepeats) 
		.thru (map, function () {
			return 	target_items
						.thru (dropRepeatsWith, json_equal) 	
		})
		.thru (switchLatest)
		.thru (afterSilence, loading_interval)
		.thru (tap, function () {
			var date = new Date ();
			self .render ()
				.then (function () {
					log ('dynamic-load ' + (new Date () - date) + 'ms', self);
				});
		})
</script>

