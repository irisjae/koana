<modal>
    <start>
        <hour>
            <input value={ ('0' + start_hour ()) .slice (-2) } pattern="d*" step="1" min="1" max="12" readonly="true">
            <label up ref="start-hour-up" />
            <label down ref="start-hour-down" />
        </hour>
        <separator>:</separator>
        <minutes>
            <input value={ ('0' + start_minute ()) .slice (-2) } pattern="d*" step="1" min="1" max="12" readonly="true">
            <label up ref="start-minute-up" />
            <label down ref="start-minute-down" />
        </minutes>
        <label ref="start-ampm-toggle">{ start_ampm () }</label>
    </start>
    <end>
        <hour>
            <input value={ ('0' + end_hour ()) .slice (-2) } pattern="d*" step="1" min="1" max="12" readonly="true">
            <label up ref="end-hour-up" />
            <label down ref="end-hour-down" />
        </hour>
        <separator>:</separator>
        <minutes>
            <input value={ ('0' + end_minute ()) .slice (-2) } pattern="d*" step="1" min="1" max="12" readonly="true">
            <label up ref="end-minute-up" />
            <label down ref="end-minute-down" />
        </minutes>
        <label ref="end-ampm-toggle">{ end_ampm () }</label>
    </end>
</modal>

<style>
	> modal {
		> start, > end {
			@extend [strip-layout];
			
			> hour, > minutes {
				@extend [patch-layout];
    				            
                > input {
                    background: transparent;
                    box-shadow: none;
                    border: 0;
                    border-radius: 0;
                    text-align: center;
                    margin: 0;
                    padding: 0;
                    color: #393939;
                    font-size: 14px;
                    position: relative;
                    width: 100%;
                    display: inline-block;
            	}
            	> label[up], label[down] {
                    position: absolute;
                    right: 0;
                    width: 14px;
                    padding: 0 4px 0 2px;
                    height: 50%;
                    line-height: 50%;
                    opacity: 0;
                    border: 1px solid rgba(57, 57, 57, 0.05);
                    display: inline-block;

                    &:hover {
                        background: rgba(0, 0, 0, 0.1);
                    }
                    &:after {
                        border-bottom-color: #393939;
                        border-left: 4px solid transparent;
                        border-right: 4px solid transparent;
                        border-bottom: 4px solid rgba(57, 57, 57, 0.6);
                        display: block;
                        content: "";
                        position: absolute;
                        top: 33%;
                	}
            	}
            	> label[up] {
                    top: 0;
                    border-bottom: 0;
            	}
            	> label[down] {
                    top: 50%;
            	}
            	
            	&:hover {
            	    @extend [active];
            	    
                    > label[up], > label[down] {
                	    opacity: 1;
                	}
            	}
			}
			> separator {
                color: #393939;
                font-weight: bold;
                width: 2%;
			}
			> label {
                flex-grow: 0;
                flex-basis: 18%;
                
                &:hover {
    			    @extend [active];
    			}
			}
		}
	}
</style>

<script>
    var start_hour = stream (7)
    var start_minute = stream (30)
    var start_ampm = stream ('PM')
    var end_hour = stream (9)
    var end_minute = stream (0)
    var end_ampm = stream ('PM')
        
    var start_hour_up = ref ('start-hour-up')
    var start_hour_down = ref ('start-hour-down')
    var start_minute_up = ref ('start-minute-up')
    var start_minute_down = ref ('start-minute-down')
    var start_ampm_toggle = ref ('start-ampm-toggle')
    var end_hour_up = ref ('end-hour-up')
    var end_hour_down = ref ('end-hour-down')
    var end_minute_up = ref ('end-minute-up')
    var end_minute_down = ref ('end-minute-down')
    var end_ampm_toggle = ref ('end-ampm-toggle')

    mergeAll ([
        start_hour, start_minute, start_ampm,
        end_hour, end_minute, end_ampm
    ])
    .thru (map, noop) .thru (tap, self .render)
    .thru (tap, function () {
        if (args .timeslot__to)
            args .timeslot__to ({
                start: ('0' + start_hour ()) .slice (-2) + ':' + ('0' + start_minute ()) .slice (-2) + ' ' + start_ampm (),
                end: ('0' + end_hour ()) .slice (-2) + ':' + ('0' + end_minute ()) .slice (-2) + ' ' + end_ampm ()
            })
    })
        
    start_hour_up .thru (tap, function (ref) {
        ref .addEventListener ('click', function () {
            start_hour (
                (start_hour () % 12) + 1)
        })
    })
    start_hour_down .thru (tap, function (ref) {
        ref .addEventListener ('click', function () {
            start_hour (
                (start_hour () - 1) || 12)
        })
    })
    start_minute_up .thru (tap, function (ref) {
        ref .addEventListener ('click', function () {
            start_minute (
                (start_minute () + 30) % 60)
        })
    })
    start_minute_down .thru (tap, function (ref) {
        ref .addEventListener ('click', function () {
            start_minute (
                (start_minute () + 30) % 60)
        })
    })
    start_ampm_toggle .thru (tap, function (ref) {
        ref .addEventListener ('click', function () {
            start_ampm (
                start_ampm () === 'AM' ? 'PM' : 'AM')
        })
    })
    end_hour_up .thru (tap, function (ref) {
        ref .addEventListener ('click', function () {
            end_hour (
                (end_hour () % 12) + 1)
        })
    })
    end_hour_down .thru (tap, function (ref) {
        ref .addEventListener ('click', function () {
            end_hour (
                (end_hour () - 1) || 12)
        })
    })
    end_minute_up .thru (tap, function (ref) {
        ref .addEventListener ('click', function () {
            end_minute (
                (end_minute () + 30) % 60)
        })
    })
    end_minute_down .thru (tap, function (ref) {
        ref .addEventListener ('click', function () {
            end_minute (
                (end_minute () + 30) % 60)
        })
    })
    end_ampm_toggle .thru (tap, function (ref) {
        ref .addEventListener ('click', function () {
            end_ampm (
                end_ampm () === 'AM' ? 'PM' : 'AM')
        })
    })
</script>