<nav>
	<nav-bar>
		<nav-buttons>
			<a href="#account/quizes">
				<component-back-button />
			</a>
		</nav-buttons>
		<nav-title>
			<component-page-title>Points: { points }/20</component-page-title>
		</nav-title>
	</nav-bar>
</nav>
<component-main-content>
	<question>
		<number>
			<label>Q{ nth }.</label>
		</number>
		<label>{ text () }</label>
		
		<image-holder if={ image () }><img src={ image () }></image-holder>
		
		<component-spacing height="20px" />
	
		<guesses>
			<guess><a href="#account/quiz/subcategory/#{ [ category, points + points_for (0), nth + 1 ] .map (stringify) .join ('/') }">{ guesses () [0] }</a></guess>
			<guess><a href="#account/quiz/subcategory/#{ [ category, points + points_for (1), nth + 1 ] .map (stringify) .join ('/') }">{ guesses () [1] }</a></guess>
			<guess><a href="#account/quiz/subcategory/#{ [ category, points + points_for (2), nth + 1 ] .map (stringify) .join ('/') }">{ guesses () [2] }</a></guess>
			<guess><a href="#account/quiz/subcategory/#{ [ category, points + points_for (3), nth + 1 ] .map (stringify) .join ('/') }">{ guesses () [3] }</a></guess>
		</guesses>
	</question>
	<!--<navigation>
		<component-prev-button if={ nth > 1 } />
		<component-next-button if={ nth < 20 } />
	</navigation>-->
</component-main-content>

<style>
	@extend [page-layout];
	
	question {
	    padding: 10px 15px 10px 15px;
	    display: block;
	    left: 0;
	    right: 0;
	    bottom: 95px;
	    top: 0;
	    position: absolute;
	    overflow: scroll;
		
		color: #4FABFF;
		
		> number {
			> label {
				font-size: 6em;
			}
		}
		
		> label {
			font-size: 1.4em;
			display: block;
		}
		
		> image-holder {
			> img {
				max-height: 40%;
				width: auto;
			}
		}
		
		> guesses {
		    width: 100%;
		    display: flex;
		    flex-wrap: wrap;
		    justify-content: space-between;
		    
		    > guess {
    	        flex-basis: calc(50% - 5px);
			    flex-grow: 0;
			    flex-shrink: 0;
			    min-height: 5em;
			    margin: 5px 0;
			    padding: 4px;
			    word-break: break-word;
		    	
				> a {
					background: #B8E4FA;
				    color: #888;
				    border-radius: 7px;
				    padding: 0.5em;
				    width: 100%;
				    height: 100%;
				    display: block;
				    text-align: center;
				    
				    &[active] {
					    color: #566573;
					    background: hsla(209,100%,85%,1);
					}
			    }
			}
			
			
			&[completed] {
				> guess {
					> a {
						&[correct] {
						    color: #566573;
   							background: hsla(149,100%,65%,1);
						}
						&[active] {
						    color: #FFF;
						    background: hsla(0,100%,50%,1);
						}
						&[correct][active] {
						    color: #566573;
   							background: hsla(149,100%,75%,1);
						}
					}
					
				}
			}
		}
	}
		
	navigation {
	    bottom: 0;
	    left: 0;
	    right: 0;
	    position: absolute;
	    display: block;
	    opacity: 0.7;
	    
	    > component-prev-button {
			position: absolute;
		    left: 25%;
		    bottom: 0;
		}
	    > component-next-button {
			position: absolute;
		    right: 25%;
		    bottom: 0;
		}
	}
</style>

<script>
	self .temp = true;
	
	var questions_items = stream ();

	var category = parse (args [0]);
	var points = parse (args [1]) || 0;
	var nth = parse (args [2]) || 1;
		
	var questions_in_category = mechanism (function () {
		return 	questions_items () .filter (function (item) {
					return item .category === category
				})
	}, [questions_items])
	var question = mechanism (function () {
		var pool = questions_in_category ();
		return pool [Math .floor (Math .random () * pool .length)] .question
	}, [questions_in_category])
	var text = mechanism (function () {
		return question () .text
	}, [question])
	var answer = mechanism (function () {
		return question () .answer
	}, [question])
	var traps = mechanism (function () {
		return question () .traps
	}, [question])
	var image = mechanism (function () {
		return question () .image
	}, [question])
		
	var guesses =	mechanism (function () {
						var array = [answer ()] .concat (traps ());
					
						var currentIndex = array .length
						var temporaryValue
						var randomIndex;
						
						// While there remain elements to shuffle...
						while (0 !== currentIndex) {
						
							// Pick a remaining element...
							randomIndex = Math .floor (Math .random () * currentIndex);
							currentIndex -= 1;
							
							// And swap it with the current element.
							temporaryValue = array [currentIndex];
							array [currentIndex] = array [randomIndex];
							array [randomIndex] = temporaryValue;
						}
						
						return array;
					}, [question]) .thru (begins_with, [[]])
		
	var points_for = function (guess) {
		return guesses () [guess] === answer () ? 1 : 0
	}
		
	question .thru (map, noop) .thru (tap, self .render)
	
	args .cycle__from
		.thru (tap, function () {
			inquire_last (api () .questions)
				.then (function (items) {
					questions_items (items)
				})
		})
</script>